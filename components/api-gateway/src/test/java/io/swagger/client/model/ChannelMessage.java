/*
 * Fizz
 * API reference for the Fizz platform.  # Introduction The Fizz platform comprises of the following services:   - **Analytics**: Run analysis on ingested events to provide insights into user behaviour and sentiment.   - **Chat**: A multilingual chat solution for integrating global audiences.   - **Cloud Messaging**: Create topics for communicating between users, systems etc reliably. Communicate using in-app messages or push notifications.   - **Translate**: Translate text in 36 languages in real-time with slang support.  # Authentication Some Fizz APIs use a signature based authentication. Each application is provided with an Id and a secret. The application Id is specified as part of the API route. However the secret is used to compute an HMAC-SHA256 digest of the raw body of the request. In case of get call body will be replaced with json containing nonce as property. It is expected that the digest is supplied in the Authorization header with the keyword HMAC e.g<br/><br/> digest = hmac_sha256(body, app_secret)<br/> Authorization Header => HMAC-SHA256 digest  # Glossary ## Users  All operations in the Fizz services are performed by users. A user is anything that uses the Fizz system. Users can include users, bots, systems etc Please note that Fizz does not ensure that users are uniquely identified and is the responsibility of the application system.  ## Subscriber An entities that subscribes to messages published on a topic (or channel).  ## Topics Implements a topic-based publish-subscribe system that allows entities (publishers) to send messages to subscribers in a reliable way.  ## Channels Establishes a channel of communication (or \"chat-room\") between different entities. Entities can publish messages to a channel which are then delivered to all subscribing entities. Channels persist all messages to a message journal which allows offline entities to read through the message history. A channel can also comprise of multiple topics for sharding large channels.  ## Event A thing of interest that takes place in a system. Fizz allows events to be ingested into the system. The analytics service runs various kinds of analyses on the ingested data to extract valuable insights. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@fizz.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * ChannelMessage
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-02-04T14:33:33.766771+05:00[Asia/Karachi]")
public class ChannelMessage {
  @SerializedName("id")
  private BigDecimal id = null;

  @SerializedName("from")
  private String from = null;

  @SerializedName("to")
  private String to = null;

  @SerializedName("nick")
  private String nick = null;

  @SerializedName("body")
  private String body = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("translations")
  private Map<String, String> translations = null;

  @SerializedName("created")
  private BigDecimal created = null;

  public ChannelMessage id(BigDecimal id) {
    this.id = id;
    return this;
  }

   /**
   * Uniquely identifies the message in the channel.
   * @return id
  **/
  @Schema(required = true, description = "Uniquely identifies the message in the channel.")
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }

  public ChannelMessage from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @Schema(required = true, description = "")
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }

  public ChannelMessage to(String to) {
    this.to = to;
    return this;
  }

   /**
   * The recepient of the message (the channel id).
   * @return to
  **/
  @Schema(required = true, description = "The recepient of the message (the channel id).")
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public ChannelMessage nick(String nick) {
    this.nick = nick;
    return this;
  }

   /**
   * Human friendly name of the sender.
   * @return nick
  **/
  @Schema(description = "Human friendly name of the sender.")
  public String getNick() {
    return nick;
  }

  public void setNick(String nick) {
    this.nick = nick;
  }

  public ChannelMessage body(String body) {
    this.body = body;
    return this;
  }

   /**
   * The message body.
   * @return body
  **/
  @Schema(description = "The message body.")
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }

  public ChannelMessage data(String data) {
    this.data = data;
    return this;
  }

   /**
   * Any user specified data that can be attached with the message.
   * @return data
  **/
  @Schema(description = "Any user specified data that can be attached with the message.")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public ChannelMessage translations(Map<String, String> translations) {
    this.translations = translations;
    return this;
  }

  public ChannelMessage putTranslationsItem(String key, String translationsItem) {
    if (this.translations == null) {
      this.translations = new HashMap<String, String>();
    }
    this.translations.put(key, translationsItem);
    return this;
  }

   /**
   * Get translations
   * @return translations
  **/
  @Schema(description = "")
  public Map<String, String> getTranslations() {
    return translations;
  }

  public void setTranslations(Map<String, String> translations) {
    this.translations = translations;
  }

  public ChannelMessage created(BigDecimal created) {
    this.created = created;
    return this;
  }

   /**
   * Unix timestamp (in milliseconds) of the message&#x27;s creation time.
   * @return created
  **/
  @Schema(required = true, description = "Unix timestamp (in milliseconds) of the message's creation time.")
  public BigDecimal getCreated() {
    return created;
  }

  public void setCreated(BigDecimal created) {
    this.created = created;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelMessage channelMessage = (ChannelMessage) o;
    return Objects.equals(this.id, channelMessage.id) &&
        Objects.equals(this.from, channelMessage.from) &&
        Objects.equals(this.to, channelMessage.to) &&
        Objects.equals(this.nick, channelMessage.nick) &&
        Objects.equals(this.body, channelMessage.body) &&
        Objects.equals(this.data, channelMessage.data) &&
        Objects.equals(this.translations, channelMessage.translations) &&
        Objects.equals(this.created, channelMessage.created);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, from, to, nick, body, data, translations, created);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelMessage {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    nick: ").append(toIndentedString(nick)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
