/*
 * Fizz
 * API reference for the Fizz platform.  # Introduction The Fizz platform comprises of the following services:   - **Analytics**: Run analysis on ingested events to provide insights into user behaviour and sentiment.   - **Chat**: A multilingual chat solution for integrating global audiences.   - **Cloud Messaging**: Create topics for communicating between users, systems etc reliably. Communicate using in-app messages or push notifications.   - **Translate**: Translate text in 36 languages in real-time with slang support.  # Authentication Some Fizz APIs use a signature based authentication. Each application is provided with an Id and a secret. The application Id is specified as part of the API route. However the secret is used to compute an HMAC-SHA256 digest of the raw body of the request. In case of get call body will be replaced with json containing nonce as property. It is expected that the digest is supplied in the Authorization header with the keyword HMAC e.g<br/><br/> digest = hmac_sha256(body, app_secret)<br/> Authorization Header => HMAC-SHA256 digest  # Glossary ## Users  All operations in the Fizz services are performed by users. A user is anything that uses the Fizz system. Users can include users, bots, systems etc Please note that Fizz does not ensure that users are uniquely identified and is the responsibility of the application system.  ## Subscriber An entities that subscribes to messages published on a topic (or channel).  ## Topics Implements a topic-based publish-subscribe system that allows entities (publishers) to send messages to subscribers in a reliable way.  ## Channels Establishes a channel of communication (or \"chat-room\") between different entities. Entities can publish messages to a channel which are then delivered to all subscribing entities. Channels persist all messages to a message journal which allows offline entities to read through the message history. A channel can also comprise of multiple topics for sharding large channels.  ## Event A thing of interest that takes place in a system. Fizz allows events to be ingested into the system. The analytics service runs various kinds of analyses on the ingested data to extract valuable insights. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@fizz.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * Group
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-02-04T14:33:33.766771+05:00[Asia/Karachi]")
public class Group {
  @SerializedName("id")
  private String id = null;

  @SerializedName("channel_id")
  private String channelId = null;

  @SerializedName("created_by")
  private String createdBy = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("image_url")
  private String imageUrl = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("created")
  private BigDecimal created = null;

  @SerializedName("updated")
  private BigDecimal updated = null;

  public Group id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Uniquely identifies the group.
   * @return id
  **/
  @Schema(required = true, description = "Uniquely identifies the group.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Group channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

   /**
   * Uniquely identifies the comminucation channel of the group.
   * @return channelId
  **/
  @Schema(description = "Uniquely identifies the comminucation channel of the group.")
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }

  public Group createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @Schema(required = true, description = "")
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }

  public Group title(String title) {
    this.title = title;
    return this;
  }

   /**
   * A human readable title of the group.
   * @return title
  **/
  @Schema(description = "A human readable title of the group.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public Group imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * The url of the profile image to be displayed for the group.
   * @return imageUrl
  **/
  @Schema(description = "The url of the profile image to be displayed for the group.")
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public Group description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the purpose of the group.
   * @return description
  **/
  @Schema(description = "A description of the purpose of the group.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Group type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Specifies the type of the group.
   * @return type
  **/
  @Schema(description = "Specifies the type of the group.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Group created(BigDecimal created) {
    this.created = created;
    return this;
  }

   /**
   * Unix timestamp (in milliseconds) of the groups&#x27;s creation time.
   * @return created
  **/
  @Schema(description = "Unix timestamp (in milliseconds) of the groups's creation time.")
  public BigDecimal getCreated() {
    return created;
  }

  public void setCreated(BigDecimal created) {
    this.created = created;
  }

  public Group updated(BigDecimal updated) {
    this.updated = updated;
    return this;
  }

   /**
   * Unix timestamp (in milliseconds) of the last group update.
   * @return updated
  **/
  @Schema(description = "Unix timestamp (in milliseconds) of the last group update.")
  public BigDecimal getUpdated() {
    return updated;
  }

  public void setUpdated(BigDecimal updated) {
    this.updated = updated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Group group = (Group) o;
    return Objects.equals(this.id, group.id) &&
        Objects.equals(this.channelId, group.channelId) &&
        Objects.equals(this.createdBy, group.createdBy) &&
        Objects.equals(this.title, group.title) &&
        Objects.equals(this.imageUrl, group.imageUrl) &&
        Objects.equals(this.description, group.description) &&
        Objects.equals(this.type, group.type) &&
        Objects.equals(this.created, group.created) &&
        Objects.equals(this.updated, group.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, channelId, createdBy, title, imageUrl, description, type, created, updated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Group {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
