/*
 * Fizz
 * API reference for the Fizz platform.  # Introduction The Fizz platform comprises of the following services:   - **Analytics**: Run analysis on ingested events to provide insights into user behaviour and sentiment.   - **Chat**: A multilingual chat solution for integrating global audiences.   - **Cloud Messaging**: Create topics for communicating between users, systems etc reliably. Communicate using in-app messages or push notifications.   - **Translate**: Translate text in 36 languages in real-time with slang support.  # Authentication Some Fizz APIs use a signature based authentication. Each application is provided with an Id and a secret. The application Id is specified as part of the API route. However the secret is used to compute an HMAC-SHA256 digest of the raw body of the request. In case of get call body will be replaced with json containing nonce as property. It is expected that the digest is supplied in the Authorization header with the keyword HMAC e.g<br/><br/> digest = hmac_sha256(body, app_secret)<br/> Authorization Header => HMAC-SHA256 digest  # Glossary ## Users  All operations in the Fizz services are performed by users. A user is anything that uses the Fizz system. Users can include users, bots, systems etc Please note that Fizz does not ensure that users are uniquely identified and is the responsibility of the application system.  ## Subscriber An entities that subscribes to messages published on a topic (or channel).  ## Topics Implements a topic-based publish-subscribe system that allows entities (publishers) to send messages to subscribers in a reliable way.  ## Channels Establishes a channel of communication (or \"chat-room\") between different entities. Entities can publish messages to a channel which are then delivered to all subscribing entities. Channels persist all messages to a message journal which allows offline entities to read through the message history. A channel can also comprise of multiple topics for sharding large channels.  ## Event A thing of interest that takes place in a system. Fizz allows events to be ingested into the system. The analytics service runs various kinds of analyses on the ingested data to extract valuable insights. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@fizz.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EventType;
import io.swagger.client.model.Platform;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * Abstract base model for all events. Do not use this model directly.
 */
@Schema(description = "Abstract base model for all events. Do not use this model directly.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-02-04T14:33:33.766771+05:00[Asia/Karachi]")
public class AbstractEvent {
  @SerializedName("user_id")
  private String userId = null;

  @SerializedName("type")
  private EventType type = null;

  @SerializedName("ver")
  private Integer ver = null;

  @SerializedName("session_id")
  private String sessionId = null;

  @SerializedName("time")
  private BigDecimal time = null;

  @SerializedName("platform")
  private Platform platform = null;

  @SerializedName("build")
  private String build = null;

  @SerializedName("custom_01")
  private String custom01 = null;

  @SerializedName("custom_02")
  private String custom02 = null;

  @SerializedName("custom_03")
  private String custom03 = null;

  public AbstractEvent userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Uniquely identifies a user. Should be same across user sessions.
   * @return userId
  **/
  @Schema(required = true, description = "Uniquely identifies a user. Should be same across user sessions.")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public AbstractEvent type(EventType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(required = true, description = "")
  public EventType getType() {
    return type;
  }

  public void setType(EventType type) {
    this.type = type;
  }

  public AbstractEvent ver(Integer ver) {
    this.ver = ver;
    return this;
  }

   /**
   * Version of the event being used. Should be set to 1.
   * @return ver
  **/
  @Schema(example = "1", required = true, description = "Version of the event being used. Should be set to 1.")
  public Integer getVer() {
    return ver;
  }

  public void setVer(Integer ver) {
    this.ver = ver;
  }

  public AbstractEvent sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

   /**
   * Uniquely identifies a session. Can be set to a random UUID generated at session started time. Should be the same across all events of the same session.
   * @return sessionId
  **/
  @Schema(required = true, description = "Uniquely identifies a session. Can be set to a random UUID generated at session started time. Should be the same across all events of the same session.")
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }

  public AbstractEvent time(BigDecimal time) {
    this.time = time;
    return this;
  }

   /**
   * Time when event took place. Should be a unix timestamp in UTC.
   * @return time
  **/
  @Schema(example = "1528790031", required = true, description = "Time when event took place. Should be a unix timestamp in UTC.")
  public BigDecimal getTime() {
    return time;
  }

  public void setTime(BigDecimal time) {
    this.time = time;
  }

  public AbstractEvent platform(Platform platform) {
    this.platform = platform;
    return this;
  }

   /**
   * Get platform
   * @return platform
  **/
  @Schema(description = "")
  public Platform getPlatform() {
    return platform;
  }

  public void setPlatform(Platform platform) {
    this.platform = platform;
  }

  public AbstractEvent build(String build) {
    this.build = build;
    return this;
  }

   /**
   * Get build
   * @return build
  **/
  @Schema(description = "")
  public String getBuild() {
    return build;
  }

  public void setBuild(String build) {
    this.build = build;
  }

  public AbstractEvent custom01(String custom01) {
    this.custom01 = custom01;
    return this;
  }

   /**
   * Get custom01
   * @return custom01
  **/
  @Schema(description = "")
  public String getCustom01() {
    return custom01;
  }

  public void setCustom01(String custom01) {
    this.custom01 = custom01;
  }

  public AbstractEvent custom02(String custom02) {
    this.custom02 = custom02;
    return this;
  }

   /**
   * Get custom02
   * @return custom02
  **/
  @Schema(description = "")
  public String getCustom02() {
    return custom02;
  }

  public void setCustom02(String custom02) {
    this.custom02 = custom02;
  }

  public AbstractEvent custom03(String custom03) {
    this.custom03 = custom03;
    return this;
  }

   /**
   * Get custom03
   * @return custom03
  **/
  @Schema(description = "")
  public String getCustom03() {
    return custom03;
  }

  public void setCustom03(String custom03) {
    this.custom03 = custom03;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbstractEvent abstractEvent = (AbstractEvent) o;
    return Objects.equals(this.userId, abstractEvent.userId) &&
        Objects.equals(this.type, abstractEvent.type) &&
        Objects.equals(this.ver, abstractEvent.ver) &&
        Objects.equals(this.sessionId, abstractEvent.sessionId) &&
        Objects.equals(this.time, abstractEvent.time) &&
        Objects.equals(this.platform, abstractEvent.platform) &&
        Objects.equals(this.build, abstractEvent.build) &&
        Objects.equals(this.custom01, abstractEvent.custom01) &&
        Objects.equals(this.custom02, abstractEvent.custom02) &&
        Objects.equals(this.custom03, abstractEvent.custom03);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, type, ver, sessionId, time, platform, build, custom01, custom02, custom03);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbstractEvent {\n");
    
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ver: ").append(toIndentedString(ver)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    custom01: ").append(toIndentedString(custom01)).append("\n");
    sb.append("    custom02: ").append(toIndentedString(custom02)).append("\n");
    sb.append("    custom03: ").append(toIndentedString(custom03)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
