/*
 * Fizz
 * API reference for the Fizz platform.  # Introduction The Fizz platform comprises of the following services:   - **Analytics**: Run analysis on ingested events to provide insights into user behaviour and sentiment.   - **Chat**: A multilingual chat solution for integrating global audiences.   - **Cloud Messaging**: Create topics for communicating between users, systems etc reliably. Communicate using in-app messages or push notifications.   - **Translate**: Translate text in 36 languages in real-time with slang support.  # Authentication Some Fizz APIs use a signature based authentication. Each application is provided with an Id and a secret. The application Id is specified as part of the API route. However the secret is used to compute an HMAC-SHA256 digest of the raw body of the request. In case of get call body will be replaced with json containing nonce as property. It is expected that the digest is supplied in the Authorization header with the keyword HMAC e.g<br/><br/> digest = hmac_sha256(body, app_secret)<br/> Authorization Header => HMAC-SHA256 digest  # Glossary ## Users  All operations in the Fizz services are performed by users. A user is anything that uses the Fizz system. Users can include users, bots, systems etc Please note that Fizz does not ensure that users are uniquely identified and is the responsibility of the application system.  ## Subscriber An entities that subscribes to messages published on a topic (or channel).  ## Topics Implements a topic-based publish-subscribe system that allows entities (publishers) to send messages to subscribers in a reliable way.  ## Channels Establishes a channel of communication (or \"chat-room\") between different entities. Entities can publish messages to a channel which are then delivered to all subscribing entities. Channels persist all messages to a message journal which allows offline entities to read through the message history. A channel can also comprise of multiple topics for sharding large channels.  ## Event A thing of interest that takes place in a system. Fizz allows events to be ingested into the system. The analytics service runs various kinds of analyses on the ingested data to extract valuable insights. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@fizz.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import io.swagger.client.model.ErrorReply;
import io.swagger.client.model.QueryChannelMessagesResponse;
import io.swagger.client.model.QueryChannelTopicsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TopicApi {
    private ApiClient apiClient;

    public TopicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TopicApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for publishChannelTopicMessage
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param topicId Uniquely identifies a channel&#x27;s topic. Specifying the channel id here targets the default topic.  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call publishChannelTopicMessageCall(String channelId, String topicId, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/channels/{channelId}/topics/{topicId}/messages"
            .replaceAll("\\{" + "channelId" + "\\}", apiClient.escapeString(channelId.toString()))
            .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "digest" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call publishChannelTopicMessageValidateBeforeCall(String channelId, String topicId, Object body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling publishChannelTopicMessage(Async)");
        }
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling publishChannelTopicMessage(Async)");
        }
        
        com.squareup.okhttp.Call call = publishChannelTopicMessageCall(channelId, topicId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Publish message in a channel topic
     * Publish messages to a specific channel.
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param topicId Uniquely identifies a channel&#x27;s topic. Specifying the channel id here targets the default topic.  (required)
     * @param body  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object publishChannelTopicMessage(String channelId, String topicId, Object body) throws ApiException {
        ApiResponse<Object> resp = publishChannelTopicMessageWithHttpInfo(channelId, topicId, body);
        return resp.getData();
    }

    /**
     * Publish message in a channel topic
     * Publish messages to a specific channel.
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param topicId Uniquely identifies a channel&#x27;s topic. Specifying the channel id here targets the default topic.  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> publishChannelTopicMessageWithHttpInfo(String channelId, String topicId, Object body) throws ApiException {
        com.squareup.okhttp.Call call = publishChannelTopicMessageValidateBeforeCall(channelId, topicId, body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Publish message in a channel topic (asynchronously)
     * Publish messages to a specific channel.
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param topicId Uniquely identifies a channel&#x27;s topic. Specifying the channel id here targets the default topic.  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call publishChannelTopicMessageAsync(String channelId, String topicId, Object body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = publishChannelTopicMessageValidateBeforeCall(channelId, topicId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryChannelTopicMessages
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param topicId Uniquely identifies a channel&#x27;s topic. Specifying the channel id here targets the default topic.  (required)
     * @param requesterId The id of the user, requesting the messages in the channel topic. (required)
     * @param count The number of messages to query. (required)
     * @param beforeId Fetch count messages before the specified message id. (optional)
     * @param afterId Fetch count messages after the specified message id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryChannelTopicMessagesCall(String channelId, String topicId, String requesterId, Integer count, BigDecimal beforeId, BigDecimal afterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/channels/{channelId}/topics/{topicId}/messages"
            .replaceAll("\\{" + "channelId" + "\\}", apiClient.escapeString(channelId.toString()))
            .replaceAll("\\{" + "topicId" + "\\}", apiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (requesterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requesterId", requesterId));
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        if (beforeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("before_id", beforeId));
        if (afterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("after_id", afterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "digest" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryChannelTopicMessagesValidateBeforeCall(String channelId, String topicId, String requesterId, Integer count, BigDecimal beforeId, BigDecimal afterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling queryChannelTopicMessages(Async)");
        }
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling queryChannelTopicMessages(Async)");
        }
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling queryChannelTopicMessages(Async)");
        }
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling queryChannelTopicMessages(Async)");
        }
        
        com.squareup.okhttp.Call call = queryChannelTopicMessagesCall(channelId, topicId, requesterId, count, beforeId, afterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query channel topic messages
     * Query the messages in a specific topic of a channel. If both before_id and after_id are not specified then the latest count messages are queried. If both before_id and after_id are specified then before_id takes precedence.
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param topicId Uniquely identifies a channel&#x27;s topic. Specifying the channel id here targets the default topic.  (required)
     * @param requesterId The id of the user, requesting the messages in the channel topic. (required)
     * @param count The number of messages to query. (required)
     * @param beforeId Fetch count messages before the specified message id. (optional)
     * @param afterId Fetch count messages after the specified message id. (optional)
     * @return QueryChannelMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueryChannelMessagesResponse queryChannelTopicMessages(String channelId, String topicId, String requesterId, Integer count, BigDecimal beforeId, BigDecimal afterId) throws ApiException {
        ApiResponse<QueryChannelMessagesResponse> resp = queryChannelTopicMessagesWithHttpInfo(channelId, topicId, requesterId, count, beforeId, afterId);
        return resp.getData();
    }

    /**
     * Query channel topic messages
     * Query the messages in a specific topic of a channel. If both before_id and after_id are not specified then the latest count messages are queried. If both before_id and after_id are specified then before_id takes precedence.
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param topicId Uniquely identifies a channel&#x27;s topic. Specifying the channel id here targets the default topic.  (required)
     * @param requesterId The id of the user, requesting the messages in the channel topic. (required)
     * @param count The number of messages to query. (required)
     * @param beforeId Fetch count messages before the specified message id. (optional)
     * @param afterId Fetch count messages after the specified message id. (optional)
     * @return ApiResponse&lt;QueryChannelMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueryChannelMessagesResponse> queryChannelTopicMessagesWithHttpInfo(String channelId, String topicId, String requesterId, Integer count, BigDecimal beforeId, BigDecimal afterId) throws ApiException {
        com.squareup.okhttp.Call call = queryChannelTopicMessagesValidateBeforeCall(channelId, topicId, requesterId, count, beforeId, afterId, null, null);
        Type localVarReturnType = new TypeToken<QueryChannelMessagesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query channel topic messages (asynchronously)
     * Query the messages in a specific topic of a channel. If both before_id and after_id are not specified then the latest count messages are queried. If both before_id and after_id are specified then before_id takes precedence.
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param topicId Uniquely identifies a channel&#x27;s topic. Specifying the channel id here targets the default topic.  (required)
     * @param requesterId The id of the user, requesting the messages in the channel topic. (required)
     * @param count The number of messages to query. (required)
     * @param beforeId Fetch count messages before the specified message id. (optional)
     * @param afterId Fetch count messages after the specified message id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryChannelTopicMessagesAsync(String channelId, String topicId, String requesterId, Integer count, BigDecimal beforeId, BigDecimal afterId, final ApiCallback<QueryChannelMessagesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryChannelTopicMessagesValidateBeforeCall(channelId, topicId, requesterId, count, beforeId, afterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueryChannelMessagesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for queryChannelTopics
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param requesterId The id of the user, requesting for channel topics. Only the users with the admin role can request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call queryChannelTopicsCall(String channelId, String requesterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/channels/{channelId}/topics"
            .replaceAll("\\{" + "channelId" + "\\}", apiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (requesterId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("requesterId", requesterId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "digest" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call queryChannelTopicsValidateBeforeCall(String channelId, String requesterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling queryChannelTopics(Async)");
        }
        // verify the required parameter 'requesterId' is set
        if (requesterId == null) {
            throw new ApiException("Missing the required parameter 'requesterId' when calling queryChannelTopics(Async)");
        }
        
        com.squareup.okhttp.Call call = queryChannelTopicsCall(channelId, requesterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Query channel topics
     * Query the topics in a specific channel.
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param requesterId The id of the user, requesting for channel topics. Only the users with the admin role can request. (required)
     * @return QueryChannelTopicsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public QueryChannelTopicsResponse queryChannelTopics(String channelId, String requesterId) throws ApiException {
        ApiResponse<QueryChannelTopicsResponse> resp = queryChannelTopicsWithHttpInfo(channelId, requesterId);
        return resp.getData();
    }

    /**
     * Query channel topics
     * Query the topics in a specific channel.
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param requesterId The id of the user, requesting for channel topics. Only the users with the admin role can request. (required)
     * @return ApiResponse&lt;QueryChannelTopicsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<QueryChannelTopicsResponse> queryChannelTopicsWithHttpInfo(String channelId, String requesterId) throws ApiException {
        com.squareup.okhttp.Call call = queryChannelTopicsValidateBeforeCall(channelId, requesterId, null, null);
        Type localVarReturnType = new TypeToken<QueryChannelTopicsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Query channel topics (asynchronously)
     * Query the topics in a specific channel.
     * @param channelId The channel&#x27;s Id (name). (required)
     * @param requesterId The id of the user, requesting for channel topics. Only the users with the admin role can request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call queryChannelTopicsAsync(String channelId, String requesterId, final ApiCallback<QueryChannelTopicsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = queryChannelTopicsValidateBeforeCall(channelId, requesterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<QueryChannelTopicsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
