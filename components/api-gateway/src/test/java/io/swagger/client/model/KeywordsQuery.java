/*
 * Fizz
 * API reference for the Fizz platform.  # Introduction The Fizz platform comprises of the following services:   - **Analytics**: Run analysis on ingested events to provide insights into user behaviour and sentiment.   - **Chat**: A multilingual chat solution for integrating global audiences.   - **Cloud Messaging**: Create topics for communicating between users, systems etc reliably. Communicate using in-app messages or push notifications.   - **Translate**: Translate text in 36 languages in real-time with slang support.  # Authentication Some Fizz APIs use a signature based authentication. Each application is provided with an Id and a secret. The application Id is specified as part of the API route. However the secret is used to compute an HMAC-SHA256 digest of the raw body of the request. In case of get call body will be replaced with json containing nonce as property. It is expected that the digest is supplied in the Authorization header with the keyword HMAC e.g<br/><br/> digest = hmac_sha256(body, app_secret)<br/> Authorization Header => HMAC-SHA256 digest  # Glossary ## Users  All operations in the Fizz services are performed by users. A user is anything that uses the Fizz system. Users can include users, bots, systems etc Please note that Fizz does not ensure that users are uniquely identified and is the responsibility of the application system.  ## Subscriber An entities that subscribes to messages published on a topic (or channel).  ## Topics Implements a topic-based publish-subscribe system that allows entities (publishers) to send messages to subscribers in a reliable way.  ## Channels Establishes a channel of communication (or \"chat-room\") between different entities. Entities can publish messages to a channel which are then delivered to all subscribing entities. Channels persist all messages to a message journal which allows offline entities to read through the message history. A channel can also comprise of multiple topics for sharding large channels.  ## Event A thing of interest that takes place in a system. Fizz allows events to be ingested into the system. The analytics service runs various kinds of analyses on the ingested data to extract valuable insights. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@fizz.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.MessagesQuerySentimentScore;
import io.swagger.client.model.Platform;
import io.swagger.client.model.SegmentAge;
import io.swagger.client.model.SegmentSpender;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * KeywordsQuery
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-02-04T14:33:33.766771+05:00[Asia/Karachi]")
public class KeywordsQuery {
  @SerializedName("start")
  private BigDecimal start = null;

  @SerializedName("end")
  private BigDecimal end = null;

  @SerializedName("text")
  private String text = null;

  @SerializedName("phrase")
  private String phrase = null;

  @SerializedName("channel_id")
  private String channelId = null;

  @SerializedName("user_id")
  private String userId = null;

  @SerializedName("nick")
  private String nick = null;

  @SerializedName("country_code")
  private String countryCode = null;

  @SerializedName("platform")
  private Platform platform = null;

  @SerializedName("build")
  private String build = null;

  @SerializedName("custom_01")
  private String custom01 = null;

  @SerializedName("custom_02")
  private String custom02 = null;

  @SerializedName("custom_03")
  private String custom03 = null;

  @SerializedName("age")
  private SegmentAge age = null;

  @SerializedName("spender")
  private SegmentSpender spender = null;

  @SerializedName("sentiment_score")
  private MessagesQuerySentimentScore sentimentScore = null;

  public KeywordsQuery start(BigDecimal start) {
    this.start = start;
    return this;
  }

   /**
   * The start time of the query. Specify a unix timestamp (seconds since epoch).
   * @return start
  **/
  @Schema(example = "1514764800", required = true, description = "The start time of the query. Specify a unix timestamp (seconds since epoch).")
  public BigDecimal getStart() {
    return start;
  }

  public void setStart(BigDecimal start) {
    this.start = start;
  }

  public KeywordsQuery end(BigDecimal end) {
    this.end = end;
    return this;
  }

   /**
   * The end time of the query. Specify a unix timestamp (seconds since epoch).
   * @return end
  **/
  @Schema(example = "1528790031", required = true, description = "The end time of the query. Specify a unix timestamp (seconds since epoch).")
  public BigDecimal getEnd() {
    return end;
  }

  public void setEnd(BigDecimal end) {
    this.end = end;
  }

  public KeywordsQuery text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Search using words in the specified text.
   * @return text
  **/
  @Schema(description = "Search using words in the specified text.")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public KeywordsQuery phrase(String phrase) {
    this.phrase = phrase;
    return this;
  }

   /**
   * Search using the specified phrase.
   * @return phrase
  **/
  @Schema(description = "Search using the specified phrase.")
  public String getPhrase() {
    return phrase;
  }

  public void setPhrase(String phrase) {
    this.phrase = phrase;
  }

  public KeywordsQuery channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

   /**
   * Search messages in the specified channel id.
   * @return channelId
  **/
  @Schema(description = "Search messages in the specified channel id.")
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }

  public KeywordsQuery userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Search for all messages sent by the sender specified by id.
   * @return userId
  **/
  @Schema(description = "Search for all messages sent by the sender specified by id.")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public KeywordsQuery nick(String nick) {
    this.nick = nick;
    return this;
  }

   /**
   * Get nick
   * @return nick
  **/
  @Schema(description = "")
  public String getNick() {
    return nick;
  }

  public void setNick(String nick) {
    this.nick = nick;
  }

  public KeywordsQuery countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * iso standard 2 digits country code.
   * @return countryCode
  **/
  @Schema(description = "iso standard 2 digits country code.")
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }

  public KeywordsQuery platform(Platform platform) {
    this.platform = platform;
    return this;
  }

   /**
   * Get platform
   * @return platform
  **/
  @Schema(description = "")
  public Platform getPlatform() {
    return platform;
  }

  public void setPlatform(Platform platform) {
    this.platform = platform;
  }

  public KeywordsQuery build(String build) {
    this.build = build;
    return this;
  }

   /**
   * Get build
   * @return build
  **/
  @Schema(description = "")
  public String getBuild() {
    return build;
  }

  public void setBuild(String build) {
    this.build = build;
  }

  public KeywordsQuery custom01(String custom01) {
    this.custom01 = custom01;
    return this;
  }

   /**
   * Get custom01
   * @return custom01
  **/
  @Schema(description = "")
  public String getCustom01() {
    return custom01;
  }

  public void setCustom01(String custom01) {
    this.custom01 = custom01;
  }

  public KeywordsQuery custom02(String custom02) {
    this.custom02 = custom02;
    return this;
  }

   /**
   * Get custom02
   * @return custom02
  **/
  @Schema(description = "")
  public String getCustom02() {
    return custom02;
  }

  public void setCustom02(String custom02) {
    this.custom02 = custom02;
  }

  public KeywordsQuery custom03(String custom03) {
    this.custom03 = custom03;
    return this;
  }

   /**
   * Get custom03
   * @return custom03
  **/
  @Schema(description = "")
  public String getCustom03() {
    return custom03;
  }

  public void setCustom03(String custom03) {
    this.custom03 = custom03;
  }

  public KeywordsQuery age(SegmentAge age) {
    this.age = age;
    return this;
  }

   /**
   * Get age
   * @return age
  **/
  @Schema(description = "")
  public SegmentAge getAge() {
    return age;
  }

  public void setAge(SegmentAge age) {
    this.age = age;
  }

  public KeywordsQuery spender(SegmentSpender spender) {
    this.spender = spender;
    return this;
  }

   /**
   * Get spender
   * @return spender
  **/
  @Schema(description = "")
  public SegmentSpender getSpender() {
    return spender;
  }

  public void setSpender(SegmentSpender spender) {
    this.spender = spender;
  }

  public KeywordsQuery sentimentScore(MessagesQuerySentimentScore sentimentScore) {
    this.sentimentScore = sentimentScore;
    return this;
  }

   /**
   * Get sentimentScore
   * @return sentimentScore
  **/
  @Schema(description = "")
  public MessagesQuerySentimentScore getSentimentScore() {
    return sentimentScore;
  }

  public void setSentimentScore(MessagesQuerySentimentScore sentimentScore) {
    this.sentimentScore = sentimentScore;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordsQuery keywordsQuery = (KeywordsQuery) o;
    return Objects.equals(this.start, keywordsQuery.start) &&
        Objects.equals(this.end, keywordsQuery.end) &&
        Objects.equals(this.text, keywordsQuery.text) &&
        Objects.equals(this.phrase, keywordsQuery.phrase) &&
        Objects.equals(this.channelId, keywordsQuery.channelId) &&
        Objects.equals(this.userId, keywordsQuery.userId) &&
        Objects.equals(this.nick, keywordsQuery.nick) &&
        Objects.equals(this.countryCode, keywordsQuery.countryCode) &&
        Objects.equals(this.platform, keywordsQuery.platform) &&
        Objects.equals(this.build, keywordsQuery.build) &&
        Objects.equals(this.custom01, keywordsQuery.custom01) &&
        Objects.equals(this.custom02, keywordsQuery.custom02) &&
        Objects.equals(this.custom03, keywordsQuery.custom03) &&
        Objects.equals(this.age, keywordsQuery.age) &&
        Objects.equals(this.spender, keywordsQuery.spender) &&
        Objects.equals(this.sentimentScore, keywordsQuery.sentimentScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(start, end, text, phrase, channelId, userId, nick, countryCode, platform, build, custom01, custom02, custom03, age, spender, sentimentScore);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordsQuery {\n");
    
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    phrase: ").append(toIndentedString(phrase)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    nick: ").append(toIndentedString(nick)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    build: ").append(toIndentedString(build)).append("\n");
    sb.append("    custom01: ").append(toIndentedString(custom01)).append("\n");
    sb.append("    custom02: ").append(toIndentedString(custom02)).append("\n");
    sb.append("    custom03: ").append(toIndentedString(custom03)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    spender: ").append(toIndentedString(spender)).append("\n");
    sb.append("    sentimentScore: ").append(toIndentedString(sentimentScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
